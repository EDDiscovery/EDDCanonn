        private void ProcessFSDJump(JObject eventData)
        {
            lock (_lockSystemData)
            {
                systemData.Name = eventData["StarSystem"]?.ToString();
                systemData.SystemAddress = eventData["SystemAddress"] != null ? eventData["SystemAddress"].ToObject<long>() : 0;

                if (eventData["StarPos"] != null)
                {
                    List<double> starPos = eventData["StarPos"].ToObject<List<double>>();
                    if (starPos != null && starPos.Count == 3)
                    {
                        systemData.X = starPos[0];
                        systemData.Y = starPos[1];
                        systemData.Z = starPos[2];
                        systemData.HasCoordinate = true;
                    }
                }
            }
        }

        private void ProcessScan(JObject eventData)
        {
            lock (_lockSystemData)
            {
                if (systemData.Bodys == null)
                {
                    systemData.Bodys = new Dictionary<string, Body>();
                }

                int bodyId = eventData["BodyID"] != null ? eventData["BodyID"].ToObject<int>() : -1;
                string bodyIdString = bodyId.ToString();

                if (!systemData.Bodys.ContainsKey(bodyIdString))
                {
                    systemData.Bodys[bodyIdString] = new Body
                    {
                        BodyID = bodyId,
                        BodyName = eventData["BodyName"]?.ToString(),
                        SystemBodyName = systemData.Name
                    };
                }

                Body body = systemData.Bodys[bodyIdString];
                body.ScanData = new ScanData
                {
                    BodyID = bodyId,
                    BodyName = eventData["BodyName"]?.ToString(),
                    IsPlanet = eventData.Contains("PlanetClass"),
                    ScanType = eventData["ScanType"]?.ToString(),
                    Signals = eventData["Signals"]?.ToObject<List<JObject>>(),
                    SurfaceFeatures = eventData["Materials"]?.ToObject<List<JObject>>()
                };
            }
        }

        private void ProcessFSSBodySignals(JObject eventData)
        {
            lock (_lockSystemData)
            {
                if (systemData.Bodys == null)
                {
                    systemData.Bodys = new Dictionary<string, Body>();
                }

                int bodyId = eventData["BodyID"] != null ? eventData["BodyID"].ToObject<int>() : -1;
                string bodyIdString = bodyId.ToString();

                if (!systemData.Bodys.ContainsKey(bodyIdString))
                {
                    systemData.Bodys[bodyIdString] = new Body
                    {
                        BodyID = bodyId,
                        BodyName = eventData["BodyName"]?.ToString(),
                        SystemBodyName = systemData.Name
                    };
                }

                Body body = systemData.Bodys[bodyIdString];
                if (body.ScanData == null)
                {
                    body.ScanData = new ScanData();
                }

                List<JObject> signals = eventData["Signals"]?.ToObject<List<JObject>>();
                if (signals != null)
                {
                    if (body.ScanData.Signals == null)
                    {
                        body.ScanData.Signals = new List<JObject>();
                    }
                    body.ScanData.Signals.AddRange(signals);
                }
            }
        }

        private void ProcessFSSDiscoveryScan(JObject eventData)
        {
            lock (_lockSystemData)
            {
                systemData.FSSTotalBodies = eventData["BodyCount"] != null ? eventData["BodyCount"].ToObject<int>() : 0;
                systemData.FSSTotalNonBodies = eventData["NonBodyCount"] != null ? eventData["NonBodyCount"].ToObject<int>() : 0;
            }
        }

        private void ProcessFSSSignalDiscovered(JObject eventData)
        {
            lock (_lockSystemData)
            {
                if (systemData.FSSSignalList == null)
                {
                    systemData.FSSSignalList = new List<JObject>();
                }

                systemData.FSSSignalList.Add(eventData);
            }
        }

        private void ProcessSAASignalsFound(JObject eventData)
        {
            lock (_lockSystemData)
            {
                if (systemData.Bodys == null)
                {
                    systemData.Bodys = new Dictionary<string, Body>();
                }

                int bodyId = eventData["BodyID"] != null ? eventData["BodyID"].ToObject<int>() : -1;
                string bodyIdString = bodyId.ToString();

                if (!systemData.Bodys.ContainsKey(bodyIdString))
                {
                    systemData.Bodys[bodyIdString] = new Body
                    {
                        BodyID = bodyId,
                        BodyName = eventData["BodyName"]?.ToString(),
                        SystemBodyName = systemData.Name
                    };
                }

                Body body = systemData.Bodys[bodyIdString];
                if (body.ScanData == null)
                {
                    body.ScanData = new ScanData();
                }

                List<JObject> signals = eventData["Signals"]?.ToObject<List<JObject>>();
                if (signals != null)
                {
                    if (body.ScanData.Signals == null)
                    {
                        body.ScanData.Signals = new List<JObject>();
                    }
                    body.ScanData.Signals.AddRange(signals);
                }

                List<JObject> genuses = eventData["Genuses"]?.ToObject<List<JObject>>();
                if (genuses != null)
                {
                    if (body.ScanData.Genuses == null)
                    {
                        body.ScanData.Genuses = new List<JObject>();
                    }
                    body.ScanData.Genuses.AddRange(genuses);
                }
            }
        }

        private void ProcessRefresh(JournalEntry je)
        {
            lock (_lockSystemData)
                _systemData = null;
            DLLCallBack.RequestScanData(RequestTag.System, this, je.systemname, true);
        }
        #endregion

        #region ProcessCallbackSystem
        public void ProcessCallbackSystem(JObject root)
        {
            lock (_lockSystemData)
            {
                try
                {

                    if (root == null)
                        return;

                    if (root["System"] != null)
                    {
                        JObject systemDataNode = root["System"]?.Object();
                        if (systemDataNode != null)
                        {
                            ProcessCallbackSystemData(systemDataNode);
                        }
                    }

                    if (root["StarNodes"] != null)
                    {
                        JObject starNodes = root["StarNodes"]?.Object();
                        if (starNodes != null)
                        {
                            ProcessCallbackStarNodes(starNodes);
                        }
                    }

                    if (root["FSSSignalList"] != null)
                    {
                        if (root["FSSSignalList"] is JArray signals)
                        {
                            if (systemData.FSSSignalList == null)
                            {
                                systemData.FSSSignalList = new List<JObject>();
                            }
                            systemData.FSSSignalList.AddRange(signals.OfType<JObject>());
                        }
                    }
                    if (root["CodexEntryList"] != null)
                    {
                        if (root["CodexEntryList"] is JArray codexEntries)
                        {
                            if (systemData.CodexEntryList == null)
                            {
                                systemData.CodexEntryList = new List<JObject>();
                            }
                            systemData.CodexEntryList.AddRange(codexEntries.OfType<JObject>());
                        }
                    }

                    systemData.FSSTotalBodies = root["FSSTotalBodies"]?.ToObject<int>() ?? 0;
                    systemData.FSSTotalNonBodies = root["FSSTotalNonBodies"]?.ToObject<int>() ?? 0;

                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine(ex.Message);
                }

            }
        }





                public void ProcessCallbackSystem(JObject root)
        {
            lock (_lockSystemData)
            {
                try
                {
                    if (root == null)
                        return;

                    if (root["System"] != null)
                    {
                        JObject systemDataNode = root["System"]?.Object();
                        if (systemDataNode != null)
                            ProcessCallbackSystemData(systemDataNode);
                    }

                    if (root["StarNodes"] != null)
                    {
                        JObject starNodes = root["StarNodes"]?.Object();
                        if (starNodes != null)
                            ProcessCallbackStarNodes(starNodes);
                    }

                    if (root["FSSSignalList"] != null && root["FSSSignalList"] is JArray signals)
                    {
                        if (systemData.FSSSignalList == null)
                            systemData.FSSSignalList = new List<JObject>();
                        systemData.FSSSignalList.AddRange(signals.OfType<JObject>());
                    }

                    if (root["CodexEntryList"] != null && root["CodexEntryList"] is JArray codexEntries)
                    {
                        if (systemData.CodexEntryList == null)
                            systemData.CodexEntryList = new List<JObject>();
                        systemData.CodexEntryList.AddRange(codexEntries.OfType<JObject>());
                    }

                    systemData.FSSTotalBodies = root["FSSTotalBodies"]?.ToObject<int>() ?? 0;
                    systemData.FSSTotalNonBodies = root["FSSTotalNonBodies"]?.ToObject<int>() ?? 0;

                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine(ex.Message);
                }

            }
        }

        private void ProcessCallbackSystemData(JObject system)
        {
            // Extract and populate main system details
            systemData.Name = system["Name"]?.ToString();
            systemData.X = system["X"]?.ToObject<double>() ?? 0.0;
            systemData.Y = system["Y"]?.ToObject<double>() ?? 0.0;
            systemData.Z = system["Z"]?.ToObject<double>() ?? 0.0;
            systemData.HasCoordinate = system["HasCoordinate"]?.ToObject<bool>() ?? false;
            systemData.SystemAddress = system["SystemAddress"]?.ToObject<long>() ?? 0;
        }

        private void ProcessCallbackStarNodes(JObject starNodes, int? parentBodyId = null) //wip
        {
            if (starNodes == null)
                return;

            foreach (KeyValuePair<string, JToken> property in starNodes)
            {
                string nodeKey = property.Key;
                JObject starNode = property.Value as JObject;

                if (starNode == null)
                {
                    continue;
                }

                // Extract BodyID; skip processing if invalid
                int bodyId = starNode["BodyID"] != null ? starNode["BodyID"].ToObject<int>() : -1;
                if (bodyId == -1)
                {
                    continue;
                }

                if (systemData.Bodys == null)
                {
                    systemData.Bodys = new Dictionary<string, Body>();
                }


                if (systemData.Bodys.ContainsKey(bodyId.ToString()))
                {
                    continue;
                }

                Body body = new Body
                {
                    //Primitives
                    BodyID = bodyId,
                    NodeType = starNode["NodeType"]?.ToString(),
                    BodyDesignator = starNode["BodyDesignator"]?.ToString(),
                    OwnName = starNode["OwnName"]?.ToString(),
                    SystemBodyName = starNode["SystemBodyName"]?.ToString(),
                    Level = starNode["Level"] != null ? starNode["Level"].ToObject<int>() : 0
                };


                JObject scanDataNode = starNode["ScanData"] as JObject;
                if (scanDataNode != null)
                {
                    body.ScanData = new ScanData
                    {
                        //Primitives
                        IsPlanet = scanDataNode["IsPlanet"] != null ? scanDataNode["IsPlanet"].ToObject<bool>() : false,
                        BodyDesignation = scanDataNode["BodyDesignation"]?.ToString(),
                        BodyDesignationOrName = scanDataNode["BodyDesignationOrName"]?.ToString(),
                        ScanType = scanDataNode["ScanType"]?.ToString(),
                        BodyName = scanDataNode["BodyName"]?.ToString(),
                        BodyID = scanDataNode["BodyID"] != null ? scanDataNode["BodyID"].ToObject<int>() : 0,
                        HasRings = scanDataNode["HasRings"] != null ? scanDataNode["HasRings"].ToObject<bool>() : false,

                        //List<JObject>    
                        Signals = scanDataNode["Signals"] is JArray scanArray ? scanArray.OfType<JObject>().ToList() : new List<JObject>(),
                        SurfaceFeatures = scanDataNode["SurfaceFeatures"] is JArray surfaceFeatures ? surfaceFeatures.OfType<JObject>().ToList() : new List<JObject>(),
                        Rings = scanDataNode["Rings"] is JArray rings ? rings.OfType<JObject>().ToList() : new List<JObject>(),
                        Organics = scanDataNode["Organics"] is JArray organics ? organics.OfType<JObject>().ToList() : new List<JObject>(),
                        Genuses = scanDataNode["Genuses"] is JArray genuses ? genuses.OfType<JObject>().ToList() : new List<JObject>(),
                    };
                }

                systemData.Bodys[bodyId.ToString()] = body;

                // Recursively process child nodes
                JObject children = starNode["Children"] as JObject;
                if (children != null)
                {
                    ProcessCallbackStarNodes(children, bodyId);
                }
            }
        }








                private void ProcessScan(JObject eventData)
        {
            lock (_lockSystemData)
            {
                if (systemData.Bodys == null)
                {
                    systemData.Bodys = new Dictionary<string, Body>();
                }

                int bodyId = eventData["BodyID"] != null ? eventData["BodyID"].ToObject<int>() : -1;
                string bodyIdString = bodyId.ToString();

                if (!systemData.Bodys.ContainsKey(bodyIdString))
                {
                    systemData.Bodys[bodyIdString] = new Body
                    {
                        BodyID = bodyId,
                        BodyName = eventData["BodyName"]?.ToString(),
                        SystemBodyName = systemData.Name
                    };
                }

                Body body = systemData.Bodys[bodyIdString];

                body.BodyID = bodyId;
                body.BodyName = eventData["BodyName"]?.ToString();

                if (body.ScanData == null)
                {
                    body.ScanData = new ScanData
                    {
                        BodyID = bodyId,
                        BodyName = eventData["BodyName"]?.ToString(),
                        IsPlanet = eventData.Contains("PlanetClass"),
                        ScanType = eventData["ScanType"]?.ToString(),
                        Signals = eventData["Signals"] is JArray signals ? signals.OfType<JObject>().ToList() : new List<JObject>(),
                        SurfaceFeatures = eventData["SurfaceFeatures"] is JArray materials ? materials.OfType<JObject>().ToList() : new List<JObject>()
                    };
                }
                else
                {
                    body.ScanData.BodyID = bodyId;
                    body.ScanData.BodyName = eventData["BodyName"]?.ToString();
                    body.ScanData.IsPlanet = eventData.Contains("PlanetClass");
                    body.ScanData.ScanType = eventData["ScanType"]?.ToString();

                    if (eventData["Signals"] != null && eventData["Signals"] is JArray signals)
                    {
                        if (body.ScanData.Signals == null)
                            body.ScanData.Signals = new List<JObject>();
                        body.ScanData.Signals.AddRange(signals.OfType<JObject>());
                    }

                    if (eventData["SurfaceFeatures"] != null && eventData["SurfaceFeatures"] is JArray materials)
                    {
                        if (body.ScanData.SurfaceFeatures == null)
                            body.ScanData.SurfaceFeatures = new List<JObject>();
                        body.ScanData.SurfaceFeatures.AddRange(materials.OfType<JObject>());
                    }
                }
            }
        }



        system["Z"]?.ToObject<double>() ?? 0.0;

                                long id64 = CanonnHelper.GetValueOrDefault(new JToken(record["ID64"]), long(0));
                        double x = CanonnHelper.GetValueOrDefault(new JToken(record["X"]), 0.0);
                        double y = CanonnHelper.GetValueOrDefault(new JToken(record["Y"]), 0.0);
                        double z = CanonnHelper.GetValueOrDefault(new JToken(record["Z"]), 0.0);


                        "\"4660.56250\""



                                private void InitializePatrols()
        {
            try
            {
                toolStripPatrol.Items.Add("all"); //The 'all' KdTree-Dictionary has already been set in “Patrols.cs”.
                toolStripRange.Items.AddRange(CanonnHelper.PatrolRanges.Cast<object>().ToArray());

                //Start a 'head worker' to avoid blocking the UI thread.
                dataHandler.StartTaskAsync(
                () =>
                {
                    List<Task> _tasks = new List<Task>(); //We have to make sure that all workers are finished before we draw the patrols.
                    try
                    {
                        //Fetch information about available patrols.
                        List<Dictionary<string, string>> records = CanonnHelper.ParseTsv(dataHandler.FetchData(CanonnHelper.PatrolUrl));
                        foreach (Dictionary<string, string> record in records)
                        {
                            try
                            {
                                string description = record.TryGetValue("Description", out string descriptionValue)
                                    ? descriptionValue
                                    : "uncategorized";
                                bool enabled = record.TryGetValue("Enabled", out string enabledValue)
                                    && enabledValue == "Y";
                                string type = record.TryGetValue("Type", out string typeValue)
                                    ? typeValue
                                    : string.Empty;
                                string url = record.TryGetValue("Url", out string urlValue)
                                    ? urlValue
                                    : string.Empty;

                                if (!enabled)
                                    continue;
                                if (description.Equals("Landscape Signals"))
                                    continue;

                                if (type.Equals("tsv")) //Worker for tsv files.
                                {
                                    _tasks.Add(dataHandler.StartTaskAsync(
                                        () =>
                                        {
                                            CreateFromTSV(url, description);
                                        },
                                        ex =>
                                        {
                                            Console.Error.WriteLine($"EDDCanonn: Error Initialize Patrols -> {description}: {ex.Message}");
                                        },
                                        "InitializePatrol -> SubThread: " + description
                                        ));
                                }
                                else if (type.Equals("json")) //Worker for json files.
                                {
                                    _tasks.Add(dataHandler.StartTaskAsync(
                                        () =>
                                        {
                                            CreateFromJson(url, description);
                                        },
                                        ex =>
                                        {
                                            Console.Error.WriteLine($"EDDCanonn: Error Initialize Patrols -> {description}: {ex.Message}");
                                        },
                                        "InitializePatrol -> SubThread: " + description
                                        ));
                                }
                                else
                                {
                                    //wip
                                }

                            }
                            catch (Exception ex)
                            {
                                Console.Error.WriteLine($"EDDCanonn: Error processing record category: {ex.Message}");
                            }
                        }
                    }
                    finally
                    {
                        Task.WaitAll(_tasks.ToArray());
                        Invoke((MethodInvoker)delegate
                        {
                            toolStripPatrol.Enabled = true;
                            toolStripRange.Enabled = true;

                            toolStripPatrol.SelectedIndex = 0;
                            toolStripRange.SelectedIndex = 3;

                            UpdatePatrol();
                        });
                    }
                },
                ex =>
                {
                    Console.Error.WriteLine($"EDDCanonn: Error In Patrols HeadThread: {ex.Message}");
                },
                "InitializePatrol -> HeadThread"
                );
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"EDDCanonn: Error in InitializePatrols: {ex.Message}");
            }
        }